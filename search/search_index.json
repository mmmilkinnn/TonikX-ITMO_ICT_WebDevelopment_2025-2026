{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"lab1/task_1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP</p>"},{"location":"lab1/task_1/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_1/#serverpy","title":"<code>server.py</code>","text":"<p><pre><code>import socket\n\nHOST, PORT = \"127.0.0.1\", 9999\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.bind((HOST, PORT))\n\ndata, addr = sock.recvfrom(1024)\nprint(\"from client:\", data.decode())\nsock.sendto(b\"Hello, client\", addr)\n\nsock.close()\n</code></pre> \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 <code>127.0.0.1:9999</code>, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0434\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0435\u0433\u043e \u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u00abHello, client\u00bb, \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443.</p>"},{"location":"lab1/task_1/#clientpy","title":"<code>client.py</code>","text":"<p><pre><code>import socket\n\nHOST, PORT = \"127.0.0.1\", 9999\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.sendto(b\"Hello, server\", (HOST, PORT))\n\ndata, _ = sock.recvfrom(1024)\nprint(\"from server:\", data.decode())\n\nsock.close()\n</code></pre> \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u00abHello, server\u00bb \u043d\u0430 127.0.0.1:9999, \u0436\u0434\u0451\u0442 \u043e\u0442\u0432\u0435\u0442, \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0435\u0433\u043e \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.</p> <p></p>"},{"location":"lab1/task_2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u041c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430.</p>"},{"location":"lab1/task_2/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_2/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\n\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u043a \u0430\u0434\u0440\u0435\u0441\u0443/\u043f\u043e\u0440\u0442\u0443\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.bind(('localhost', 8080))\n\n# \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043e\u0434\u043d\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \nsock.listen()\nconn, addr = sock.accept()\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430\nnums = conn.recv(1024).decode()\narr = nums.split()\na = float(arr[0])\nb = float(arr[1])\n\n# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430) \u0438 \u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u043e\u0442\u0432\u0435\u0442 \nc = (a ** 2 + b ** 2) ** 0.5\nanswer = str(c)\n\n# \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0441\u043e\u043a\u0435\u0442\nconn.send(answer.encode())\nsock.close()\n</code></pre>"},{"location":"lab1/task_2/#clientpy","title":"<code>client.py</code>","text":"<p><pre><code>import socket\n\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nsock.connect(('localhost', 8080))\n\n# \u0427\u0438\u0442\u0430\u0435\u043c \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438\na = float(input())\nb = float(input())\ndata = f\"{a} {b}\"\n\n# \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0436\u0434\u0451\u043c \u043e\u0442\u0432\u0435\u0442, \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\nsock.send(data.encode())\nprint(sock.recv(1024).decode())\n\n# \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442\nsock.close()\nprint(\"\u0421\u043e\u043a\u0435\u0442 \u0437\u0430\u043a\u0440\u044b\u0442\")\n</code></pre> </p>"},{"location":"lab1/task_3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"lab1/task_3/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_3/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\n\n# \u0441\u043e\u0437\u0434\u0430\u0451\u043c TCP-\u0441\u043e\u043a\u0435\u0442\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441\u043b\u0443\u0448\u0430\u0442\u044c\nsock.bind(('127.0.0.1', 8080))\nsock.listen()\n\n# \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043e\u0434\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\nconn, addr = sock.accept()\n\n# \u0447\u0438\u0442\u0430\u0435\u043c HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (\u043d\u0430\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432)\nrequest = conn.recv(2048).decode()\n\n# \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c html-\u0444\u0430\u0439\u043b \u0438 \u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u043a \u0431\u0430\u0439\u0442\u044b\nwith open(\"index.html\", \"rb\") as f:\n    html_bytes = f.read()\n    length = len(html_bytes)\n\n    # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0430\u0442\u0443\u0441\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430\n    headers = (\n        \"HTTP/1.1 200 OK\\r\\n\"\n        \"Content-Type: text/html; charset=utf-8\\r\\n\"\n        f\"Content-Length: {length}\\r\\n\"\n        \"Connection: close\\r\\n\"\n        \"\\r\\n\"\n    )\n\n    # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0442\u0435\u043b\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n    conn.sendall(headers.encode(\"utf-8\"))\n    conn.sendall(html_bytes)\n\n    # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n    conn.close()\n\n# \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0441\u043e\u043a\u0435\u0442\nsock.close()\n</code></pre>"},{"location":"lab1/task_3/#indexhtml","title":"<code>index.html</code>","text":"<p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;WEB LABA 3&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hello, client!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </p> <p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0431\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d  HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445. \u041e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e TCP, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 <code>index.html</code> \u0441 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438.  </p>"},{"location":"lab1/task_4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.</p> <p>\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"lab1/task_4/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_4/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\nimport threading\n\n# \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e TCP-\u0441\u043e\u043a\u0435\u0442\u0430\nHOST = '0.0.0.0'\nPORT = 9555\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\nserver.bind((HOST, PORT))\nserver.listen()\nprint(f'Server listening on {HOST}:{PORT}')\n\n# \u043e\u0431\u0449\u0435\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 \u0438 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u043e\u0432; \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438\u0437 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\nclients = []\nnicknames = []\nclients_lock = threading.Lock()\n\n# \u0443\u0442\u0438\u043b\u0438\u0442\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\ndef broadcast(message: bytes):\n    with clients_lock:\n        for client in clients:\n            try:\n                client.sendall(message)\n            except:\n                # \u0435\u0441\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c, \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u044d\u0442\u043e\u0442 \u0441\u043e\u043a\u0435\u0442\n                pass\n\n# \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0432\u0441\u0435\u043c\ndef handle(client: socket.socket):\n    while True:\n        try:\n            # \u043f\u0440\u0438\u0451\u043c \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n            data = client.recv(1024)\n            if not data:\n                # \u043f\u0443\u0441\u0442\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0442 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c\n                raise ConnectionResetError\n\n            # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0438\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n            with clients_lock:\n                idx = clients.index(client)\n                nickname = nicknames[idx]\n\n            # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \"nickname: \u0442\u0435\u043a\u0441\u0442\" \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u043c \u0432\u0441\u0435\u043c\n            message = f'{nickname}: {data.decode(\"utf-8\")}\\n'\n            broadcast(message.encode('utf-8'))\n\n        except:\n            # \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043e \u0432\u044b\u0445\u043e\u0434\u0435\n            with clients_lock:\n                if client in clients:\n                    idx = clients.index(client)\n                    clients.remove(client)\n                    nickname = nicknames.pop(idx)\n                else:\n                    nickname = 'unknown'\n            try:\n                client.close()\n            finally:\n                broadcast(f'{nickname} left the chat.\\n'.encode('utf-8'))\n                print(f'{nickname} left the chat.')\n            break\n\n# \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u043e\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (handshake)\ndef receive():\n    while True:\n        # \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f\n        client, address = server.accept()\n        print(f'Connected with {address}')\n\n        try:\n            # \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u0435: \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u043d\u0438\u043a \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0435\u0433\u043e\n            client.sendall(b'NICK')\n            nickname = client.recv(1024).decode('utf-8').strip()\n        except:\n            client.close()\n            continue\n\n        # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0435\u0433\u043e \u043d\u0438\u043a \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0440\u0430\u0441\u0441\u044b\u043b\u043e\u043a\n        with clients_lock:\n            clients.append(client)\n            nicknames.append(nickname)\n\n        # \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u043c \u0432\u0441\u0435\u0445 \u043e \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a-\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\n        print(f'Nickname is {nickname}')\n        broadcast(f'{nickname} joined the chat.\\n'.encode('utf-8'))\n        client.sendall(b'Connected to server!\\n')\n\n        # \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        threading.Thread(target=handle, args=(client,), daemon=True).start()\n\nif __name__ == '__main__':\n    try:\n        receive()\n    except KeyboardInterrupt:\n        # \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043f\u043e Ctrl+C\n        print('\\nShutting down...')\n    finally:\n        # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0441\u043e\u043a\u0435\u0442\u044b \u0438 \u0441\u043b\u0443\u0448\u0430\u0442\u0435\u043b\u044c\n        with clients_lock:\n            for c in clients:\n                c.close()\n        server.close()\n</code></pre>"},{"location":"lab1/task_4/#clientpy","title":"<code>client.py</code>","text":"<pre><code>import socket\nimport threading\n\n# \u0432\u0432\u043e\u0434 \u043d\u0438\u043a\u0430 \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c; \u043f\u0443\u0441\u0442\u043e\u0439 \u043d\u0438\u043a \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 Anonymous\nnickname = input('Choose your nickname: ').strip() or 'Anonymous'\n\n# \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 TCP-\u0441\u043e\u043a\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('127.0.0.1', 9555))\n\n# \u0444\u043e\u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a: \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0438\u0445\ndef receive():\n    while True:\n        try:\n            message = client.recv(1024).decode('utf-8')\n            if not message:\n                print('[Disconnected from server]')\n                break\n\n            # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0440\u0443\u043a\u043e\u043f\u043e\u0436\u0430\u0442\u0438\u044f \u043d\u0438\u043a\u0430\n            if message == 'NICK':\n                client.send(nickname.encode('utf-8'))\n            else:\n                # \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435; \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438\n                print(message, end='' if message.endswith('\\n') else '\\n')\n        except:\n            # \u043b\u044e\u0431\u043e\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0442\u0440\u0430\u043a\u0442\u0443\u0435\u043c \u043a\u0430\u043a \u0440\u0430\u0437\u0440\u044b\u0432 \u0441\u0432\u044f\u0437\u0438 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442\n            print('An error occurred. Closing connection.')\n            client.close()\n            break\n\n# \u0444\u043e\u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a: \u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0432\u0432\u043e\u0434 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\ndef write():\n    while True:\n        try:\n            text = input()\n        except EOFError:\n            # \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u043e EOF (Ctrl+Z/Ctrl+D \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u041e\u0421)\n            break\n        try:\n            client.send(text.encode('utf-8'))\n        except:\n            # \u0435\u0441\u043b\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0435 \u0443\u0434\u0430\u043b\u0430\u0441\u044c, \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438\n            break\n\n# \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0434\u0432\u0430 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043f\u043e\u0442\u043e\u043a\u0430: \u043f\u0440\u0438\u0451\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u043d\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0434\u0440\u0443\u0433 \u0434\u0440\u0443\u0433\u0430\nreceive_thread = threading.Thread(target=receive)\nreceive_thread.start()\nwrite_thread = threading.Thread(target=write)\nwrite_thread.start()\n</code></pre> <p>\u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading. \u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043d\u0438\u043a\u043d\u0435\u0439\u043c\u043e\u0432 \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c \u0432 \u043f\u043e\u0442\u043e\u043a\u043e\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0440\u0430\u0437\u043d\u0435\u0441\u0435\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u043e\u0442\u043e\u043a\u0430\u043c, \u0447\u0442\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0438. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435/\u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. </p>"},{"location":"lab1/task_5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p> <p>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p>"},{"location":"lab1/task_5/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_5/#serverpy","title":"<code>server.py</code>","text":"<pre><code>import socket\nimport sys\n\n# \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0435\u043c application/x-www-form-urlencoded: '+' -&gt; \u043f\u0440\u043e\u0431\u0435\u043b, %xx -&gt; \u0431\u0430\u0439\u0442 (\u043f\u043e\u0442\u043e\u043c UTF-8)\ndef url_decode(s: str) -&gt; str:\n    s = s.replace('+', ' ')\n    buf = bytearray()\n    i = 0\n    while i &lt; len(s):\n        ch = s[i]\n        if ch == '%' and i + 2 &lt; len(s):\n            try:\n                buf.append(int(s[i+1:i+3], 16))\n                i += 3\n                continue\n            except ValueError:\n                pass\n        buf.extend(ch.encode('utf-8'))\n        i += 1\n    return buf.decode('utf-8', errors='strict')\n\n# \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 k=v&amp;k2=v2 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0440\u0430\u0441\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043a\u043b\u044e\u0447\u0435\u0439 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ndef parse_params(qs: str) -&gt; dict:\n    params = {}\n    if not qs:\n        return params\n    for pair in qs.split('&amp;'):\n        if not pair:\n            continue\n        k, v = (pair.split('=', 1) + [''])[:2]\n        params[url_decode(k)] = url_decode(v)\n    return params\n\n\nclass MyHTTPServer:\n    # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0438 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\n    def __init__(self, host, port, name=\"MyHTTPServer\"):\n        self.host = host\n        self.port = port\n        self.name = name\n        self.grades = []\n        self.load_from_file()\n\n    # \u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u0438\u0437 grades.txt (UTF-8, \u0444\u043e\u0440\u043c\u0430\u0442: \u043f\u0440\u0435\u0434\u043c\u0435\u0442&lt;TAB&gt;\u043e\u0446\u0435\u043d\u043a\u0430)\n    def load_from_file(self):\n        try:\n            with open(\"grades.txt\", \"r\", encoding=\"utf-8\") as f:\n                for line in f:\n                    line = line.rstrip(\"\\n\")\n                    if not line:\n                        continue\n                    parts = line.split(\"\\t\")\n                    if len(parts) == 2:\n                        self.grades.append((parts[0], parts[1]))\n        except FileNotFoundError:\n            pass\n\n    # \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 grades.txt\n    def save_to_file(self, subject, grade):\n        with open(\"grades.txt\", \"a\", encoding=\"utf-8\") as f:\n            f.write(f\"{subject}\\t{grade}\\n\")\n\n    # \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u0441\u0435\u0440\u0432\u0435\u0440\u0430: bind/listen/accept \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\n    def serve_forever(self):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as srv:\n            srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            srv.bind((self.host, self.port))\n            srv.listen(5)\n            print(f\"Serving on http://{self.host}:{self.port}\")\n            while True:\n                conn, addr = srv.accept()\n                try:\n                    self.serve_client(conn)\n                except Exception:\n                    try:\n                        self.send_response(\n                            conn, 500, \"Internal Server Error\",\n                            \"&lt;h1&gt;500 Internal Server Error&lt;/h1&gt;\".encode(\"utf-8\"),\n                            {\"Content-Type\": \"text/html; charset=utf-8\"}\n                        )\n                    finally:\n                        conn.close()\n                else:\n                    conn.close()\n\n    # \u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0442\u0435\u043b\u043e (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c Content-Length)\n    def serve_client(self, conn):\n        rfile = conn.makefile(\"rb\")\n        method, path, version = self.parse_request(rfile)\n        headers = self.parse_headers(rfile)\n\n        body = b\"\"\n        if \"content-length\" in headers:\n            try:\n                length = int(headers[\"content-length\"])\n                if length &gt; 0:\n                    body = rfile.read(length)\n            except Exception:\n                body = b\"\"\n\n        self.handle_request(conn, method, path, headers, body)\n\n    # \u043f\u0430\u0440\u0441\u0438\u043c \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 HTTP: METHOD SP PATH SP VERSION\n    def parse_request(self, rfile):\n        line = rfile.readline().decode(\"utf-8\", errors=\"replace\").strip()\n        if not line:\n            return \"GET\", \"/\", \"HTTP/1.1\"\n        parts = line.split()\n        if len(parts) != 3:\n            return \"GET\", \"/\", \"HTTP/1.1\"\n        return parts[0], parts[1], parts[2]\n\n    # \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0434\u043e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043b\u0430\u0434\u0451\u043c \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0432 \u043d\u0438\u0436\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435\n    def parse_headers(self, rfile):\n        headers = {}\n        while True:\n            line = rfile.readline()\n            if not line:\n                break\n            line = line.decode(\"utf-8\", errors=\"replace\")\n            if line in (\"\\r\\n\", \"\\n\", \"\"):\n                break\n            if \":\" in line:\n                name, value = line.split(\":\", 1)\n                headers[name.strip().lower()] = value.strip()\n        return headers\n\n    # \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c HTML: \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438\u0437 self.grades + \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432 \u0448\u0430\u0431\u043b\u043e\u043d index.html\n    def build_html(self) -&gt; bytes:\n        if self.grades:\n            rows = \"\\n\".join(f\"&lt;tr&gt;&lt;td&gt;{subj}&lt;/td&gt;&lt;td&gt;{gr}&lt;/td&gt;&lt;/tr&gt;\"\n                             for subj, gr in self.grades)\n\n        with open(\"index.html\", \"r\", encoding=\"utf-8\") as f:\n            html = f.read()\n\n        html = html.replace(\"{{ROWS}}\", rows)\n        return html.encode(\"utf-8\")\n\n    # \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0440\u043e\u0443\u0442\u0438\u043d\u0433: GET /, GET /download, POST /add, \u0438\u043d\u0430\u0447\u0435 404\n    def handle_request(self, conn, method, path, headers, body):\n        if \"?\" in path:\n            url_path, _ = path.split(\"?\", 1)\n        else:\n            url_path = path\n\n        if method == \"GET\" and url_path == \"/\":\n            content = self.build_html()\n            self.send_response(conn, 200, \"OK\", content,\n                               {\"Content-Type\": \"text/html; charset=utf-8\"})\n            return\n\n        if method == \"GET\" and url_path == \"/download\":\n            content = self.build_html()\n            self.send_response(\n                conn, 200, \"OK\", content,\n                {\n                    \"Content-Type\": \"text/html; charset=utf-8\",\n                    \"Content-Disposition\": 'attachment; filename=\"grades.html\"',\n                }\n            )\n            return\n\n        if method == \"POST\" and url_path == \"/add\":\n            # \u0442\u0435\u043b\u043e \u0444\u043e\u0440\u043c\u044b \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 ASCII-\u0441\u0442\u0440\u043e\u043a\u043e\u0439 k=v&amp;k2=v2; \u0441\u0430\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 %xx (\u0434\u0435\u043a\u043e\u0434\u0438\u043c \u0432\u044b\u0448\u0435)\n            data = body.decode(\"ascii\", errors=\"strict\")\n            params = parse_params(data)\n            subject = params.get(\"subject\", \"\").strip()\n            grade = params.get(\"grade\", \"\").strip()\n\n            if subject and grade:\n                self.grades.append((subject, grade))\n                self.save_to_file(subject, grade)\n                content = self.build_html()\n                self.send_response(conn, 200, \"OK\", content,\n                                   {\"Content-Type\": \"text/html; charset=utf-8\"})\n            else:\n                msg = \"&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;p&gt;\u041d\u0443\u0436\u043d\u044b \u043f\u043e\u043b\u044f subject \u0438 grade.&lt;/p&gt;\".encode(\"utf-8\")\n                self.send_response(conn, 400, \"Bad Request\", msg,\n                                   {\"Content-Type\": \"text/html; charset=utf-8\"})\n            return\n\n        self.send_response(conn, 404, \"Not Found\",\n                           \"&lt;h1&gt;404 Not Found&lt;/h1&gt;\".encode(\"utf-8\"),\n                           {\"Content-Type\": \"text/html; charset=utf-8\"})\n\n    # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0430\u0442\u0443\u0441\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430\n    def send_response(self, conn, status_code, reason, body_bytes, extra_headers=None):\n        if extra_headers is None:\n            extra_headers = {}\n        conn.sendall(f\"HTTP/1.1 {status_code} {reason}\\r\\n\".encode(\"utf-8\"))\n        headers = {\n            \"Server\": self.name,\n            \"Content-Length\": str(len(body_bytes)),\n            \"Connection\": \"close\",\n        }\n        headers.update(extra_headers)\n        for k, v in headers.items():\n            conn.sendall(f\"{k}: {v}\\r\\n\".encode(\"utf-8\"))\n        conn.sendall(b\"\\r\\n\")\n        conn.sendall(body_bytes)\n\n\nif __name__ == \"__main__\":\n    # \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e + \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c host/port/name \u0438\u0437 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n    host = \"127.0.0.1\"\n    port = 8080\n    name = \"MyHTTPServer\"\n    if len(sys.argv) &gt;= 2: host = sys.argv[1]\n    if len(sys.argv) &gt;= 3: port = int(sys.argv[2])\n    if len(sys.argv) &gt;= 4: name = sys.argv[3]\n\n    serv = MyHTTPServer(host, port, name)\n    try:\n        serv.serve_forever()\n    except KeyboardInterrupt:\n        print(\"\\nStopped\")\n</code></pre>"},{"location":"lab1/task_5/#indexhtml","title":"<code>index.html</code>","text":"<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;\u041e\u0446\u0435\u043d\u043a\u0438&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/h1&gt;\n\n  &lt;!-- \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438; {{ROWS}} \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u043d\u0430 &lt;tr&gt;...&lt;/tr&gt; --&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt;&lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0430&lt;/th&gt;&lt;/tr&gt;\n    {{ROWS}}\n  &lt;/table&gt;\n\n  &lt;!-- \u0441\u0441\u044b\u043b\u043a\u0430 \u0434\u043b\u044f \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e HTML (\u043e\u0442\u0434\u0430\u0451\u0442\u0441\u044f \u0441 Content-Disposition: attachment) --&gt;\n  &lt;p&gt;&lt;a href=\"/download\"&gt;\u0421\u043a\u0430\u0447\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 (HTML)&lt;/a&gt;&lt;/p&gt;\n\n  &lt;!-- \u0444\u043e\u0440\u043c\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0438; \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST /add \u0432 UTF-8 --&gt;\n  &lt;h2&gt;\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c&lt;/h2&gt;\n  &lt;form method=\"POST\" action=\"/add\" accept-charset=\"UTF-8\"&gt;\n    &lt;label&gt;\n      \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430:\n      &lt;input name=\"subject\" required&gt;\n    &lt;/label&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;label&gt;\n      \u041e\u0446\u0435\u043d\u043a\u0430:\n      &lt;input name=\"grade\" required&gt;\n    &lt;/label&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;button type=\"submit\"&gt;\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0447\u0435\u0440\u0435\u0437 POST, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u0445 \u0438 \u043f\u043e GET \u043e\u0442\u0434\u0430\u0451\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438. \u0417\u0430\u043f\u0438\u0441\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 <code>grades.txt</code>, \u0448\u0430\u0431\u043b\u043e\u043d <code>index.html</code> \u043d\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043b\u0435\u0442\u0443, \u0444\u043e\u0440\u043c\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f (URL-\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, UTF-8). \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0435\u0441\u0442\u044c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043c\u0435\u0442\u043e\u0434\u043e\u0432, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0432\u0435\u0442\u0430.</p>"}]}